command /point <text> [<text>] [<text>] [<text>]:
    permission: op
    trigger:
        if {-questtools::%player%::pathedit} is not set:
            send "%{prefix}% Select a path before trying to edit points"
        set {_point} to {-questtools::%player%::pathpoint}
        set {_path} to {-questtools::%player%::pathedit}
        set {_points::*} to getAllCameraPathPoints({_path})
        if arg-1 is "add":
            set {-questtools::%player%::pathpoint} to last element of {_points::*}
            set {_point} to {-questtools::%player%::pathpoint}
            set {_interpolation} to getCameraPathPointValue({_point},{_path},"interpolation")
            set {_speed} to getCameraPathPointValue({_point},{_path},"speed")

            add 1 to {_point}
            set camera path point {_point} location from {_path} to eye location of player
            setCameraPathPointValue({_point},{_path},"interpolation","catmull")
            setCameraPathPointValue({_point},{_path},"speed",camera path option "defaultTime" of {_path})
            if {_interpolation} is set:
                setCameraPathPointValue({_point},{_path},"interpolation",{_interpolation})
            if {_speed} is set:
                setCameraPathPointValue({_point},{_path},"speed",{_speed})

            set {-questtools::%player%::pathpoint} to {_point}
            save yaml "camerapath-%{_path}%"
            CameraPathEditorVisualUpdate(player)

        if arg-1 is "remove":
            set {_pointsamount} to amount of {_points::*}
            delete yaml value "points.%{_point}%" of "camerapath-%{_path}%"
            loop ({_pointsamount} - {_point}) times:
                set {_looppoint} to {_point}+loop-number
                set {_interpolation} to getCameraPathPointValue({_looppoint},{_path},"interpolation")
                set {_speed} to getCameraPathPointValue({_looppoint},{_path},"speed")
                set {_location} to getCameraPathPoint({_looppoint},{_path})

                setCameraPathPoint({_looppoint}-1,{_path},{_location})
                setCameraPathPointValue({_looppoint}-1,{_path},"interpolation",{_interpolation})
                setCameraPathPointValue({_looppoint}-1,{_path},"speed",{_speed})
                delete yaml value "points.%{_looppoint}%" of "camerapath-%{_path}%"
            save yaml "camerapath-%{_path}%"
            if {_point} is more than 1:
                set {-questtools::%player%::pathpoint} to {_point} - 1
            CameraPathEditorVisualUpdate(player)
        if arg-1 is "split":
            set {_pointsamount} to amount of {_points::*}
            if {_point} is {_pointsamount}:
                send "%{prefix}% Run &a/point add to add new points at the end"
                stop

            loop ({_pointsamount} - {_point}) times:
                set {_looppoint} to {_pointsamount} - ((loop-number)-1)
                set {_interpolation} to getCameraPathPointValue({_looppoint},{_path},"interpolation")
                set {_speed} to getCameraPathPointValue({_looppoint},{_path},"speed")
                set {_location} to getCameraPathPoint({_looppoint},{_path})


                setCameraPathPoint({_looppoint}+1,{_path},{_location})
                setCameraPathPointValue({_looppoint}+1,{_path},"interpolation",{_interpolation})
                setCameraPathPointValue({_looppoint}+1,{_path},"speed",{_speed})
            
            set {_v} to vector between getCameraPathPoint({_point},{_path}) and getCameraPathPoint({_point}+1,{_path})

            set {_loc} to getCameraPathPoint({_point},{_path}) ~ {_v}*0.5
            set {_interpolation} to getCameraPathPointValue({_point},{_path},"interpolation")
            set {_speed} to getCameraPathPointValue({_point},{_path},"speed")
            add 1 to {_point}
            setCameraPathPoint({_point},{_path},{_loc})
            setCameraPathPointValue({_point},{_path},"interpolation","catmull")
            setCameraPathPointValue({_point},{_path},"speed",camera path option "defaultTime" of {_path})
            if {_interpolation} is set:
                setCameraPathPointValue({_point},{_path},"interpolation",{_interpolation})
            if {_speed} is set:
                setCameraPathPointValue({_point},{_path},"speed",{_speed})
            set {-questtools::%player%::pathpoint} to {_point}
            save yaml "camerapath-%{_path}%"
            CameraPathEditorVisualUpdate(player)
        if arg-1 is "move":
            set {_oldpoint} to camera path point {_point} location from {_path}
            set {_x} to arg-2 parsed as number if arg-2 is set else 0
            set {_y} to arg-3 parsed as number if arg-3 is set else 0
            set {_z} to arg-4 parsed as number if arg-4 is set else 0
            send "%{prefix}% Moved Point by &a%{_x}%,%{_y}%,%{_z}%&7"
            set camera path point {_point} location from {_path} to {_oldpoint} ~ vector({_x},{_y},{_z})
            CameraPathEditorVisualUpdate(player)
on tab complete of "/point":
    if player does not have permission "op":
        stop
    if {-questtools::%player%::pathedit} is not set:
        stop
    set tab completions for position 1 to "add","remove","split","move"

command /selectpoint <number>:
    permission: op
    trigger:
        if (getAllCameraPathPoints({-questtools::%player%::pathedit})) contains arg-1:
            set {-questtools::%player%::pathpoint} to arg-1
            CameraPathEditorVisualUpdate(player)
on tab complete of "/selectpoint":
    if player does not have permission "op":
        stop
    if {-questtools::%player%::pathedit} is not set:
        stop
    set tab completions for position 1 to (getAllCameraPathPoints({-questtools::%player%::pathedit}))